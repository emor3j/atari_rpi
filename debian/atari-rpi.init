#!/bin/sh
### BEGIN INIT INFO
# Provides:          atari-rpi
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Atari ST mouse simulator using GPIO
# Description:       Converts USB mouse input to Atari ST mouse signals
#                    through GPIO pins on Raspberry Pi. Provides quadrature
#                    encoder simulation for X and Y axes and left/right
#                    mouse button support.
### END INIT INFO

# Author: Jérôme SONRIER <jsid@emor3j.fr.eu.org>


PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Atari ST mouse simulator"
NAME=atari-rpi
DAEMON=/usr/bin/atari_usb_mouse
DAEMON_ARGS="--daemon"
PIDFILE=/run/atari-rpi/atari_usb_mouse.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

[ -f /etc/default/rcS ] && . /etc/default/rcS
. /lib/lsb/init-functions


do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS \
        || return 2
}

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    case "$RETVAL" in
        0|1) [ "$RETVAL" = 1 ] && return 1 ;;
        2) return 2 ;;
    esac
}

do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

#
# Function that returns the daemon status
#
do_status() {
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    do_status
    ;;
#   reload)
#     log_daemon_msg "Reloading $DESC" "$NAME"
#     do_reload
#     log_end_msg $?
#     ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac